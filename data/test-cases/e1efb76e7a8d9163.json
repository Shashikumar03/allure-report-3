{"uid":"e1efb76e7a8d9163","name":"test_validate_adding_new_address_with_valid_credential","fullName":"testCases.test_address.TestAddress#test_validate_adding_new_address_with_valid_credential","historyId":"9b1d3c23ed881e528c2278a39ada5c78","time":{"start":1707890200356,"stop":1707890236414,"duration":36058},"status":"failed","statusMessage":"AssertionError","statusTrace":"self = <testCases.test_address.TestAddress object at 0x7ff823a59540>\n\n    def test_validate_adding_new_address_with_valid_credential(self):\n        addressPage = AddressPage(self.driver)\n>       addressPage.validate_adding_new_address_with_valid_credential()\n\ntestCases/test_address.py:36: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pages.address_page.AddressPage object at 0x7ff822cd6650>\n\n    def validate_adding_new_address_with_valid_credential(self):\n        self.driver.find_element(*self.NAV_GLOBAL_LOCATION_POPOVER_LINK).click()\n        time.sleep(5)\n        self.driver.find_element(*self.ADD_ADDRESS_OR_PICK_UP_POINT).click()\n        time.sleep(2)\n        self.driver.find_element(*self.ADDRESS_TILE).click()\n        time.sleep(5)\n        fake = Faker('en_IN')\n        list = [845305, 110001, 530068, 600001, 211001, 400001, 147301, 826124]\n        first_digit = fake.random_element(elements=('1', '2', '3', '4', '5', '6', '7', '8', '9'))\n        remaining_digits = fake.random_number(digits=9)\n        phone_number = f\"{first_digit}{remaining_digits}\"\n        self.driver.find_element(*self.FULL_NAME_INPUT).send_keys(fake.name())\n        self.driver.find_element(*self.PHONE_NUMBER_INPUT).send_keys(phone_number)\n        self.driver.find_element(*self.POSTAL_CODE_INPUT).send_keys(random.choice(list))\n    \n        self.driver.find_element(*self.ADDRESS_LINE_INPUT).send_keys(fake.address())\n    \n        self.driver.find_element(*self.SUBMIT_BUTTON).click()\n        time.sleep(20)\n        text=None\n        try:\n            review = self.driver.find_element(*self.REVIEW_ADDRESS_TITLE)\n            if review.is_displayed():\n                self.driver.find_element(*self.SUBMIT_BUTTON).click()\n                text = self.driver.find_element(By.XPATH, \"//h4[normalize-space()='Address saved']\").text.lower()\n    \n        except NoSuchElementException:\n            allure.attach(self.driver.get_screenshot_as_png(), name='failed_test', attachment_type=AttachmentType.PNG)\n            print(\"exception\")\n    \n>       assert text == \"address saved\"\nE       AssertionError\n\npages/address_page.py:100: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1707889911252,"stop":1707889911289,"duration":37},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"setup","time":{"start":1707890010280,"stop":1707890013121,"duration":2841},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"log_on_failure","time":{"start":1707890200355,"stop":1707890200355,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"AssertionError","statusTrace":"self = <testCases.test_address.TestAddress object at 0x7ff823a59540>\n\n    def test_validate_adding_new_address_with_valid_credential(self):\n        addressPage = AddressPage(self.driver)\n>       addressPage.validate_adding_new_address_with_valid_credential()\n\ntestCases/test_address.py:36: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pages.address_page.AddressPage object at 0x7ff822cd6650>\n\n    def validate_adding_new_address_with_valid_credential(self):\n        self.driver.find_element(*self.NAV_GLOBAL_LOCATION_POPOVER_LINK).click()\n        time.sleep(5)\n        self.driver.find_element(*self.ADD_ADDRESS_OR_PICK_UP_POINT).click()\n        time.sleep(2)\n        self.driver.find_element(*self.ADDRESS_TILE).click()\n        time.sleep(5)\n        fake = Faker('en_IN')\n        list = [845305, 110001, 530068, 600001, 211001, 400001, 147301, 826124]\n        first_digit = fake.random_element(elements=('1', '2', '3', '4', '5', '6', '7', '8', '9'))\n        remaining_digits = fake.random_number(digits=9)\n        phone_number = f\"{first_digit}{remaining_digits}\"\n        self.driver.find_element(*self.FULL_NAME_INPUT).send_keys(fake.name())\n        self.driver.find_element(*self.PHONE_NUMBER_INPUT).send_keys(phone_number)\n        self.driver.find_element(*self.POSTAL_CODE_INPUT).send_keys(random.choice(list))\n    \n        self.driver.find_element(*self.ADDRESS_LINE_INPUT).send_keys(fake.address())\n    \n        self.driver.find_element(*self.SUBMIT_BUTTON).click()\n        time.sleep(20)\n        text=None\n        try:\n            review = self.driver.find_element(*self.REVIEW_ADDRESS_TITLE)\n            if review.is_displayed():\n                self.driver.find_element(*self.SUBMIT_BUTTON).click()\n                text = self.driver.find_element(By.XPATH, \"//h4[normalize-space()='Address saved']\").text.lower()\n    \n        except NoSuchElementException:\n            allure.attach(self.driver.get_screenshot_as_png(), name='failed_test', attachment_type=AttachmentType.PNG)\n            print(\"exception\")\n    \n>       assert text == \"address saved\"\nE       AssertionError\n\npages/address_page.py:100: AssertionError","steps":[],"attachments":[{"uid":"a46fd97d5df332cc","name":"failed_test","source":"a46fd97d5df332cc.png","type":"image/png","size":242474},{"uid":"779f77f66906f41e","name":"stdout","source":"779f77f66906f41e.txt","type":"text/plain","size":10}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":2,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"log_on_failure::0","time":{"start":1707890236430,"stop":1707890236585,"duration":155},"status":"passed","steps":[],"attachments":[{"uid":"9fb7194d35aad0a5","name":"failed_test","source":"9fb7194d35aad0a5.png","type":"image/png","size":242474}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},{"name":"setup::0","time":{"start":1707890236585,"stop":1707890236768,"duration":183},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"@pytest.mark.usefixtures('setup', 'log_on_failure')"},{"name":"parentSuite","value":"testCases"},{"name":"suite","value":"test_address"},{"name":"subSuite","value":"TestAddress"},{"name":"host","value":"shashi-Aspire-A715-41G"},{"name":"thread","value":"27537-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"testCases.test_address"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":["@pytest.mark.usefixtures('setup', 'log_on_failure')"]},"source":"e1efb76e7a8d9163.json","parameterValues":[]}