{"uid":"d9cc2743328dba91","name":"test_login_with_empty_input","fullName":"testCases.test_AmazonTest.TestAmazon#test_login_with_empty_input","historyId":"f04a089778552f5417f5d5cb553d20d8","time":{"start":1707889948344,"stop":1707889950579,"duration":2235},"status":"failed","statusMessage":"AssertionError","statusTrace":"self = <pages.amazon_home_page.AmazonHomePage object at 0x7ff822c7b820>, username = ' '\n\n    def login_with_empty_input(self, username):\n        url = self.driver.current_url\n        self.wait.until(EC.element_to_be_clickable(self.NAVIGATION_MENU)).click()\n        self.driver.find_element(*self.EMAIL_INPUT).clear()\n        self.driver.find_element(*self.EMAIL_INPUT).send_keys(username)\n        self.driver.find_element(*self.CONTINUE_BUTTON).click()\n        empty_input = self.driver.find_element(By.XPATH,\n                                               \"//div[contains(text(),'Enter your email or mobile phone number')]\").text\n    \n        # print(ErrorMessage.please_enter_phone_or_email)\n    \n    \n    \n        try:\n>           assert empty_input.lower() == ErrorMessage.please_enter_phone_or_email.lower()\nE           AssertionError\n\npages/amazon_home_page.py:73: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <testCases.test_AmazonTest.TestAmazon object at 0x7ff823a29630>\n\n    @pytest.mark.sanity\n    def test_login_with_empty_input(self):\n    \n        amazonHomePage = AmazonHomePage(self.driver)\n>       amazonHomePage.login_with_empty_input(\" \")\n\ntestCases/test_AmazonTest.py:44: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pages.amazon_home_page.AmazonHomePage object at 0x7ff822c7b820>, username = ' '\n\n    def login_with_empty_input(self, username):\n        url = self.driver.current_url\n        self.wait.until(EC.element_to_be_clickable(self.NAVIGATION_MENU)).click()\n        self.driver.find_element(*self.EMAIL_INPUT).clear()\n        self.driver.find_element(*self.EMAIL_INPUT).send_keys(username)\n        self.driver.find_element(*self.CONTINUE_BUTTON).click()\n        empty_input = self.driver.find_element(By.XPATH,\n                                               \"//div[contains(text(),'Enter your email or mobile phone number')]\").text\n    \n        # print(ErrorMessage.please_enter_phone_or_email)\n    \n    \n    \n        try:\n            assert empty_input.lower() == ErrorMessage.please_enter_phone_or_email.lower()\n        except AssertionError as e:\n             allure.attach(self.driver.get_screenshot_as_png(), name='failed_test', attachment_type=AttachmentType.PNG)\n             self.driver.get(url)\n>            assert False\nE            AssertionError\n\npages/amazon_home_page.py:77: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1707889911252,"stop":1707889911289,"duration":37},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"setup","time":{"start":1707889911290,"stop":1707889913736,"duration":2446},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"log_on_failure","time":{"start":1707889948343,"stop":1707889948343,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"AssertionError","statusTrace":"self = <pages.amazon_home_page.AmazonHomePage object at 0x7ff822c7b820>, username = ' '\n\n    def login_with_empty_input(self, username):\n        url = self.driver.current_url\n        self.wait.until(EC.element_to_be_clickable(self.NAVIGATION_MENU)).click()\n        self.driver.find_element(*self.EMAIL_INPUT).clear()\n        self.driver.find_element(*self.EMAIL_INPUT).send_keys(username)\n        self.driver.find_element(*self.CONTINUE_BUTTON).click()\n        empty_input = self.driver.find_element(By.XPATH,\n                                               \"//div[contains(text(),'Enter your email or mobile phone number')]\").text\n    \n        # print(ErrorMessage.please_enter_phone_or_email)\n    \n    \n    \n        try:\n>           assert empty_input.lower() == ErrorMessage.please_enter_phone_or_email.lower()\nE           AssertionError\n\npages/amazon_home_page.py:73: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <testCases.test_AmazonTest.TestAmazon object at 0x7ff823a29630>\n\n    @pytest.mark.sanity\n    def test_login_with_empty_input(self):\n    \n        amazonHomePage = AmazonHomePage(self.driver)\n>       amazonHomePage.login_with_empty_input(\" \")\n\ntestCases/test_AmazonTest.py:44: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pages.amazon_home_page.AmazonHomePage object at 0x7ff822c7b820>, username = ' '\n\n    def login_with_empty_input(self, username):\n        url = self.driver.current_url\n        self.wait.until(EC.element_to_be_clickable(self.NAVIGATION_MENU)).click()\n        self.driver.find_element(*self.EMAIL_INPUT).clear()\n        self.driver.find_element(*self.EMAIL_INPUT).send_keys(username)\n        self.driver.find_element(*self.CONTINUE_BUTTON).click()\n        empty_input = self.driver.find_element(By.XPATH,\n                                               \"//div[contains(text(),'Enter your email or mobile phone number')]\").text\n    \n        # print(ErrorMessage.please_enter_phone_or_email)\n    \n    \n    \n        try:\n            assert empty_input.lower() == ErrorMessage.please_enter_phone_or_email.lower()\n        except AssertionError as e:\n             allure.attach(self.driver.get_screenshot_as_png(), name='failed_test', attachment_type=AttachmentType.PNG)\n             self.driver.get(url)\n>            assert False\nE            AssertionError\n\npages/amazon_home_page.py:77: AssertionError","steps":[],"attachments":[{"uid":"a2d26215bb1f7a82","name":"failed_test","source":"a2d26215bb1f7a82.png","type":"image/png","size":50115}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"log_on_failure::0","time":{"start":1707889950649,"stop":1707889951022,"duration":373},"status":"passed","steps":[],"attachments":[{"uid":"7889d41bc7bf662a","name":"failed_test","source":"7889d41bc7bf662a.png","type":"image/png","size":859482}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},{"name":"setup::0","time":{"start":1707890010111,"stop":1707890010276,"duration":165},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"sanity"},{"name":"tag","value":"@pytest.mark.usefixtures('setup', 'log_on_failure')"},{"name":"parentSuite","value":"testCases"},{"name":"suite","value":"test_AmazonTest"},{"name":"subSuite","value":"TestAmazon"},{"name":"host","value":"shashi-Aspire-A715-41G"},{"name":"thread","value":"27537-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"testCases.test_AmazonTest"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":["@pytest.mark.usefixtures('setup', 'log_on_failure')","sanity"]},"source":"d9cc2743328dba91.json","parameterValues":[]}